@page "/"

<h1>Hello, world!</h1>

Welcome to your new app.

<SurveyPrompt Title="How is Blazor working for you?" />

<div style="margin-top:40px;">
    <h1>Lチカ</h1>
    <button @onclick="ledOn">ON</button>
    <button @onclick="ledOff">OFF</button>
</div>

<div style="margin-top:40px;">
    <h1 style="margin-top:20px;">シリアル通信</h1>
    <div style="display:flex">
        <div class="box">
            COM PORT<br>
            <select @bind="@selectComport" disabled="@serialCommunicator.IsOpen">
                @foreach (var c in comport)
                {
                    <option value=@c>@c</option>
                }
            </select>
        </div>
        <div class="box">
            baud rate<br>
            <select @bind="@selectBaudrate" disabled="@serialCommunicator.IsOpen">
                @foreach (var b in baudrate)
                {
                    <option value=@b>@b</option>
                }
            </select>
        </div>
        <button @onclick="@connect" class="box" disabled="@serialCommunicator.IsOpen">
            接続
        </button>
        <button @onclick="@disconnect" class="box" disabled="@(!serialCommunicator.IsOpen)">
            切断
        </button>
    </div>
    <div style="display:flex; margin-top:10px;">
        <div class="box">
            送信データ<br>
            <input type="text" @bind="@sendData" disabled="@(!serialCommunicator.IsOpen)">
        </div>
        <button @onclick="@Send" class="box" disabled="@(!serialCommunicator.IsOpen)">Send</button>
    </div>
    <div style="margin-top:10px;" class="box">
        受信データ<br>
        <input type="text" @bind="@recieveData">
    </div>
    <p class="box">@errormassage</p>
</div>

@code {

    int pin = 18;

    SerialCommunicator serialCommunicator = new SerialCommunicator();
    string[] comport = SerialPort.GetPortNames();
    string selectComport { get; set; } = "";
    int[] baudrate = { 1200, 2400, 4800, 9600, 19200, 38400, 57600, 115200 };
    int selectBaudrate { get; set; } = 0;
    string sendData { get; set; } = "";
    string recieveData { get; set; } = "";
    string errormassage { get; set; } = "";

    protected override void OnInitialized()
    {
        serialCommunicator.DataReceived += serialCommunicator_OnReceived;
        serialCommunicator.StateHasChanged += serialCommunicator_StateHasChanged;
    }

    private void ledOn()
    {
        using var controller = new GpioController();
        controller.OpenPin(pin, PinMode.Output);
        controller.Write(pin, PinValue.High);
    }

    private void ledOff()
    {
        using var controller = new GpioController();
        controller.OpenPin(pin, PinMode.Output);
        controller.Write(pin, PinValue.Low);
    }

    private void connect()
    {
        try
        {
            serialCommunicator.Connect(selectComport, selectBaudrate);
            errormassage = "";
        }
        catch (Exception ex)
        {
            errormassage = "error:" + ex.Message;
        }
    }

    private void disconnect()
    {
        try
        {
            serialCommunicator.Disconnect();
            errormassage = "";
        }
        catch (Exception ex)
        {
            errormassage = "error:" + ex.Message;
        }
    }

    private void Send()
    {
        serialCommunicator.Send(sendData);
    }

    private void serialCommunicator_StateHasChanged(object sender, EventArgs e)
    {
        selectComport = serialCommunicator.selectComport;
        selectBaudrate = serialCommunicator.selectBaudrate;
        InvokeAsync(() => StateHasChanged());
    }

    private void serialCommunicator_OnReceived(object sender, SerialCommunicatorDataReceivedEventArgs e)
    {
        recieveData += e.RecieveData;
        InvokeAsync(() => StateHasChanged());
    }
}



